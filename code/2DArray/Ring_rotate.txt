Ring Rotate
Easy

You are given a n*m matrix where n are the number of rows and m are the number of columns. You are also given n*m numbers representing the elements of the matrix.
You will be given a ring number 's' representing the ring of the matrix. For details, refer to image.

shell-rotate

You will be given a number 'r' representing number of rotations in an anti-clockwise manner of the specified ring.
You are required to rotate the 's'th ring by 'r' rotations and display the rotated matrix.

Constraints
1 <= n <= 10^2
1 <= m <= 10^2
-10^9 <= e11, e12, .. n * m elements <= 10^9
0 < s <= min(n, m) / 2
-10^9 <= r <= 10^9

Format
Input
A number n
A number m
e11
e12..
e21
e22..
.. n * m number of elements of array a
A number s
A number r

Output
output is handled by display function

Example
Sample Input

5
7
11
12
13
14
15
16
17
21
22
23
24
25
26
27
31
32
33
34
35
36
37
41
42
43
44
45
46
47
51
52
53
54
55
56
57
2
3

Sample Output
11 12 13 14 15 16 17
21 25 26 36 46 45 27
31 24 33 34 35 44 37
41 23 22 32 42 43 47
51 52 53 54 55 56 57

code ....

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int m = scn.nextInt();
        int[][] arr = new int[n][m];
        for(int i = 0;i<arr.length;i++){
            for(int j =0;j<arr[0].length;j++){
                arr[i][j] = scn.nextInt();
            }
        }

        int s = scn.nextInt();
        int r = scn.nextInt();
        //made a 1d array
        int[] onedarr = fillOnedArray(arr,s);
        rotate(onedarr,r);
        fillTwodArray(onedarr,arr,s);
        display(arr);
    }

    //made 1d array
    public static int[] fillOnedArray(int[][] arr,int s){
        int rows = arr.length;
        int cols = arr[0].length;
        int minr = s-1;
        int minc = s-1;
        int maxr = rows-s;
        int maxc = cols-s;

        int vwcount = maxr-minr+1;
        int hwcount = maxc-minc+1;
        int sz = 2*vwcount + 2*hwcount - 4;
        int[] onedarr = new int[sz];

        int idx = 0;
        //left wall | row increases from minr to maxc , cols stays at minc
        for(int i=minr,j=minc;i<=maxr;i++){
            onedarr[idx] = arr[i][j];
            idx++;
        }
        minc++;

        //bottom wall|row stays at maxr, cols increase from minc to maxc
        for(int i=maxr,j=minc;j<=maxc;j++){
            onedarr[idx] = arr[i][j];
            idx++;
        }
        maxr--;

        //right wall|row decrease from maxr to minr, cols stays at maxc
        for(int i=maxr,j=maxc;i>=minr;i--){
            onedarr[idx] = arr[i][j];
            idx++;
        }
        maxc--;

        //top wall|row stays at minr,cols decrease from maxc to minc
        for(int i=minr,j=maxc;j>=minc;j--){
            onedarr[idx] = arr[i][j];
            idx++;
        }
        minr++;

        return onedarr;
    }

    public static void fillTwodArray(int[] onedarr,int[][] arr,int s){
        int rows = arr.length;
        int cols = arr[0].length;
        int minr = s-1;
        int minc = s-1;
        int maxr = rows-s;
        int maxc = cols-s;

        int idx = 0;
        //left wall | row increases from minr to maxc , cols stays at minc
        for(int i=minr,j=minc;i<=maxr;i++){
            arr[i][j]=onedarr[idx];
            idx++;
        }
        minc++;

        //bottom wall|row stays at maxr, cols increase from minc to maxc
        for(int i=maxr,j=minc;j<=maxc;j++){
             arr[i][j]=onedarr[idx];
            idx++;
        }
        maxr--;

        //right wall|row decrease from maxr to minr, cols stays at maxc
        for(int i=maxr,j=maxc;i>=minr;i--){
             arr[i][j]=onedarr[idx];
            idx++;
        }
        maxc--;

        //top wall|row stays at minr,cols decrease from maxc to minc
        for(int i=minr,j=maxc;j>=minc;j--){
             arr[i][j]=onedarr[idx];
            idx++;
        }
        minr++;
        
    }

    //rotate 1d array
    public static void rotate(int[] onedarr,int r){
        r = r%onedarr.length;
        if(r<0){
            r+=onedarr.length;
        }

        reverse(onedarr,0,onedarr.length-r-1);
        reverse(onedarr,onedarr.length-r,onedarr.length-1);
        reverse(onedarr,0,onedarr.length-1);
    }

    public static void reverse(int[] onedarr,int left,int right){
        while(left<right){
            int temp = onedarr[left];
            onedarr[left] = onedarr[right];
            onedarr[right] = temp;
            left++;
            right--;
        }
    }


    public static void display(int[][] arr){
        for(int i = 0; i < arr.length; i++){
            for(int j = 0; j < arr[0].length; j++){
                System.out.print(arr[i][j] + " ");
            }
            System.out.println();
        }
    }

}